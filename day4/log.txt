==31964== Memcheck, a memory error detector
==31964== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==31964== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info
==31964== Command: ./a.out --leak-check=full --show-leak-kings=all --track-origins=yes --verbose
==31964== 
==31964== Invalid write of size 1
==31964==    at 0x109343: reverseString (in /home/tharun/projects/AOC2024/day4/a.out)
==31964==    by 0x10961E: main (in /home/tharun/projects/AOC2024/day4/a.out)
==31964==  Address 0x4a442ab is 0 bytes after a block of size 11 alloc'd
==31964==    at 0x48407B4: malloc (vg_replace_malloc.c:381)
==31964==    by 0x109304: reverseString (in /home/tharun/projects/AOC2024/day4/a.out)
==31964==    by 0x10961E: main (in /home/tharun/projects/AOC2024/day4/a.out)
==31964== 

valgrind: m_mallocfree.c:303 (get_bszB_as_is): Assertion 'bszB_lo == bszB_hi' failed.
valgrind: Heap block lo/hi size mismatch: lo = 80, hi = 5570180114576134977.
This is probably caused by your program erroneously writing past the
end of a heap block and corrupting heap metadata.  If you fix any
invalid writes reported by Memcheck, this assertion failure will
probably go away.  Please try that before reporting this as a bug.


host stacktrace:
==31964==    at 0x580429AA: show_sched_status_wrk (m_libcassert.c:406)
==31964==    by 0x58042AC7: report_and_quit (m_libcassert.c:477)
==31964==    by 0x58042C57: vgPlain_assert_fail (m_libcassert.c:543)
==31964==    by 0x5804C708: get_bszB_as_is (m_mallocfree.c:303)
==31964==    by 0x5804C708: is_inuse_block (m_mallocfree.c:331)
==31964==    by 0x5804C708: vgPlain_describe_arena_addr (m_mallocfree.c:1604)
==31964==    by 0x5803B31A: vgPlain_describe_addr (m_addrinfo.c:185)
==31964==    by 0x58039A1E: vgMemCheck_update_Error_extra (mc_errors.c:1185)
==31964==    by 0x5803E1F5: vgPlain_maybe_record_error (m_errormgr.c:822)
==31964==    by 0x58038CF8: vgMemCheck_record_address_error (mc_errors.c:765)
==31964==    by 0x1003FF66AE: ???
==31964==    by 0x1002DA9F2F: ???
==31964==    by 0x1002DA9F17: ???
==31964==    by 0x1002DA9F2F: ???
==31964==    by 0x1C0F: ???
==31964==    by 0x100200838F: ???

sched status:
  running_tid=1

Thread 1: status = VgTs_Runnable (lwpid 31964)
==31964==    at 0x10935A: reverseString (in /home/tharun/projects/AOC2024/day4/a.out)
==31964==    by 0x10961E: main (in /home/tharun/projects/AOC2024/day4/a.out)
client stack range: [0x1FFEFFE000 0x1FFF000FFF] client SP: 0x1FFF000430
valgrind stack range: [0x1002CAA000 0x1002DA9FFF] top usage: 18792 of 1048576


Note: see also the FAQ in the source distribution.
It contains workarounds to several common problems.
In particular, if Valgrind aborted or crashed after
identifying problems in your program, there's a good chance
that fixing those problems will prevent Valgrind aborting or
crashing, especially if it happened in m_mallocfree.c.

If that doesn't help, please report this bug to: www.valgrind.org

In the bug report, send all the above text, the valgrind
version, and what OS and version you are using.  Thanks.

