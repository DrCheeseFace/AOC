==10493== Memcheck, a memory error detector
==10493== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==10493== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info
==10493== Command: ./q2 --leak-check=full --show-leak-kings=all --track-origins=yes --verbose
==10493== 
==10493== Invalid write of size 8
==10493==    at 0x109593: main (q2.c:36)
==10493==  Address 0x4b22f78 is 88 bytes inside a block of size 89 alloc'd
==10493==    at 0x48407B4: malloc (vg_replace_malloc.c:381)
==10493==    by 0x109546: main (q2.c:32)
==10493== 
==10493== Conditional jump or move depends on uninitialised value(s)
==10493==    at 0x4871F98: log10 (w_log10_compat.c:30)
==10493==    by 0x109325: getOperatorSum (bruh.h:32)
==10493==    by 0x109738: main (q2.c:56)
==10493== 
==10493== Conditional jump or move depends on uninitialised value(s)
==10493==    at 0x4889D42: __log10_finite@GLIBC_2.15 (e_log10.c:67)
==10493==    by 0x109325: getOperatorSum (bruh.h:32)
==10493==    by 0x109738: main (q2.c:56)
==10493== 
==10493== Conditional jump or move depends on uninitialised value(s)
==10493==    at 0x4889D87: __log10_finite@GLIBC_2.15 (e_log10.c:78)
==10493==    by 0x109325: getOperatorSum (bruh.h:32)
==10493==    by 0x109738: main (q2.c:56)
==10493== 
==10493== Conditional jump or move depends on uninitialised value(s)
==10493==    at 0x48CC4A6: __ieee754_log_fma (e_log.c:61)
==10493==    by 0x4889DF1: __log10_finite@GLIBC_2.15 (e_log10.c:87)
==10493==    by 0x109325: getOperatorSum (bruh.h:32)
==10493==    by 0x109738: main (q2.c:56)
==10493== 
==10493== Conditional jump or move depends on uninitialised value(s)
==10493==    at 0x48CC4B5: __ieee754_log_fma (e_log.c:85)
==10493==    by 0x4889DF1: __log10_finite@GLIBC_2.15 (e_log10.c:87)
==10493==    by 0x109325: getOperatorSum (bruh.h:32)
==10493==    by 0x109738: main (q2.c:56)
==10493== 
==10493== Use of uninitialised value of size 8
==10493==    at 0x48CC525: __ieee754_log_fma (e_log.c:122)
==10493==    by 0x4889DF1: __log10_finite@GLIBC_2.15 (e_log10.c:87)
==10493==    by 0x109325: getOperatorSum (bruh.h:32)
==10493==    by 0x109738: main (q2.c:56)
==10493== 
==10493== Conditional jump or move depends on uninitialised value(s)
==10493==    at 0x48CC70E: __ieee754_pow_fma (e_pow.c:292)
==10493==    by 0x4898204: pow@@GLIBC_2.29 (w_pow_template.c:32)
==10493==    by 0x10935B: getOperatorSum (bruh.h:32)
==10493==    by 0x109738: main (q2.c:56)
==10493== 
==10493== Conditional jump or move depends on uninitialised value(s)
==10493==    at 0x48CC83E: exp_inline (e_pow.c:194)
==10493==    by 0x48CC83E: __ieee754_pow_fma (e_pow.c:379)
==10493==    by 0x4898204: pow@@GLIBC_2.29 (w_pow_template.c:32)
==10493==    by 0x10935B: getOperatorSum (bruh.h:32)
==10493==    by 0x109738: main (q2.c:56)
==10493== 
==10493== Use of uninitialised value of size 8
==10493==    at 0x48CC894: exp_inline (e_pow.c:237)
==10493==    by 0x48CC894: __ieee754_pow_fma (e_pow.c:379)
==10493==    by 0x4898204: pow@@GLIBC_2.29 (w_pow_template.c:32)
==10493==    by 0x10935B: getOperatorSum (bruh.h:32)
==10493==    by 0x109738: main (q2.c:56)
==10493== 
==10493== Conditional jump or move depends on uninitialised value(s)
==10493==    at 0x48CC8D2: exp_inline (e_pow.c:244)
==10493==    by 0x48CC8D2: __ieee754_pow_fma (e_pow.c:379)
==10493==    by 0x4898204: pow@@GLIBC_2.29 (w_pow_template.c:32)
==10493==    by 0x10935B: getOperatorSum (bruh.h:32)
==10493==    by 0x109738: main (q2.c:56)
==10493== 
==10493== Conditional jump or move depends on uninitialised value(s)
==10493==    at 0x4898227: pow@@GLIBC_2.29 (w_pow_template.c:33)
==10493==    by 0x10935B: getOperatorSum (bruh.h:32)
==10493==    by 0x109738: main (q2.c:56)
==10493== 
==10493== Conditional jump or move depends on uninitialised value(s)
==10493==    at 0x4898231: pow@@GLIBC_2.29 (w_pow_template.c:45)
==10493==    by 0x10935B: getOperatorSum (bruh.h:32)
==10493==    by 0x109738: main (q2.c:56)
==10493== 
==10493== Conditional jump or move depends on uninitialised value(s)
==10493==    at 0x4898233: pow@@GLIBC_2.29 (w_pow_template.c:45)
==10493==    by 0x10935B: getOperatorSum (bruh.h:32)
==10493==    by 0x109738: main (q2.c:56)
==10493== 
==10493== Conditional jump or move depends on uninitialised value(s)
==10493==    at 0x109754: main (q2.c:57)
==10493== 
==10493== Conditional jump or move depends on uninitialised value(s)
==10493==    at 0x48CC58D: __ieee754_log_fma (e_log.c:65)
==10493==    by 0x4889DF1: __log10_finite@GLIBC_2.15 (e_log10.c:87)
==10493==    by 0x109325: getOperatorSum (bruh.h:32)
==10493==    by 0x109738: main (q2.c:56)
==10493== 
==10493== 
==10493== More than 10000000 total errors detected.  I'm not reporting any more.
==10493== Final error counts will be inaccurate.  Go fix your program!
==10493== Rerun with --error-limit=no to disable this cutoff.  Note
==10493== that errors may occur in your program without prior warning from
==10493== Valgrind, because errors are no longer being displayed.
==10493== 
total: 97902809384118==10493== 
==10493== HEAP SUMMARY:
==10493==     in use at exit: 0 bytes in 0 blocks
==10493==   total heap usage: 853 allocs, 853 frees, 84,314 bytes allocated
==10493== 
==10493== All heap blocks were freed -- no leaks are possible
==10493== 
==10493== Use --track-origins=yes to see where uninitialised values come from
==10493== For lists of detected and suppressed errors, rerun with: -s
==10493== ERROR SUMMARY: 10000000 errors from 16 contexts (suppressed: 0 from 0)
